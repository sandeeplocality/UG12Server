using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.ComponentModel;
using System.Diagnostics;
using System.Timers;
using System.ServiceProcess;
using UniGuardLib;

namespace ScheduledTask
{
    class ScheduledTask
    {
        private const string URL = "http://portal.uniguard.com.au/task_generate.php";
        private FileInfo file;
        private static Timer timer;
        public static bool running;
        private Data data;

        public ScheduledTask()
        {
            running = false;
            // Set up the interval timer and start it
            timer = new Timer();
            timer.Interval  = 1000;
            timer.Elapsed  += new ElapsedEventHandler(this.OnTimedEvent);
            timer.AutoReset = false;
            timer.Enabled   = true;
        }

        private void OnTimedEvent(object source, ElapsedEventArgs e)
        {
            try
            {
                timer.Stop();
                if (!Utility.ServiceRunning("UniGuard12Server") && Utility.ServiceRunning("UniGuard12ScheduledTask"))
                {
                    ServiceController sc = new ServiceController("UniGuard12ScheduledTask");
                    sc.Stop();
                }
                else
                {
                    if (running) return;
                    running = true;
                    // Run the method
                    this.MonitorTasks();
                }
            }
            catch (Exception ex)
            {
                // Catch any exceptions in the stack
                Log.Error("Task monitoring error:\r\n" + ex.ToString());
            }
            finally
            {
                running = false;
                // Restart timer
                timer.Start();
            }
        }

        /// <summary>
        /// Runs through the databases a single time and emails all outstanding tasks
        /// </summary>
        private void MonitorTasks()
        {
            // Get a list of all databases (schemas) to search through
            string[] databases = LocalData.GetAllDatabases();

            // Loop over them
            for (int i = 0; i < databases.Length; ++i)
            {
                // Search for any pending tasks in each database
                data = new Data(databases[i]);

                // Get all pending tasks
                int[] tasks = data.GetPendingScheduledTasks();

                // Loop over all tasks
                foreach (int taskId in tasks)
                {
                    // Process the task
                    this.ProcessTask(data, taskId);
                    System.Threading.Thread.Sleep(1000);
                }
            }
        }

        /// <summary>
        /// Requests the report to be generated by the task Id. Must be provided a data connection to
        /// access the database methods.
        /// </summary>
        /// <param name="data">Handles database methods</param>
        /// <param name="taskId">Integer - task Id</param>
        private void ProcessTask(Data data, int taskId)
        {
            string exportFile = null;
            try
            {
                int accountId = data.GetAccountIdForDatabase();

                // Send request to server to generate report and return file name
                exportFile = this.SendRequest(accountId, taskId);

                // Check for null response
                if (exportFile == null)
                {
                    // Get task name
                    string taskName = data.GetScheduledTaskName(taskId);

                    // Log a warning
                    Log.Warning(String.Format(
                        "Scheduled task returned false for account: {0}, task scheduled: {1}, task name:",
                        accountId,
                        taskId,
                        taskName
                    ));

                    // Email the issue to admins
                    this.EmailIssue(taskName);

                    return;
                }

                // Assign response as new file
                file = new FileInfo(exportFile);

                // task[0] = timecycle_id | task[1] = content_id | task[2] = sctNextRun | task[3] = sctDescription | task[4] = sctEmailSubject
                string[] task     = data.GetScheduledTask(taskId);

                // Get email list
                string[] emails   = data.GetScheduledTaskEmailList(taskId);

                // Get report type
                string reportType = data.GetReportNameByContentId(Convert.ToInt32(task[1]));

                // Send the emails
                this.EmailTask(emails, task[3], task[4]);

                // Set next run time
                DateTime d = Convert.ToDateTime(task[2]);
                TimeSpan lastRunTime = new TimeSpan(d.Hour, d.Minute, d.Second);
                DateTime lastRunDateTime = DateTime.Today.Add(lastRunTime);

                // Create last run and next run
                string lastRun = lastRunDateTime.ToString("yyyy-MM-dd HH:mm:ss");
                string nextRun = Utility.AddTimeCycle(lastRun, Convert.ToInt32(task[0]));

                // Update task
                UpdateQuery update = new UpdateQuery();
                update.SetTable("scheduledtask");
                update.SetFields(new string[] { "sctNextRun", "sctLastRun" });
                update.SetId(taskId.ToString());
                update.AddRowValue(nextRun);
                update.AddRowValue(lastRun);

                // Enter into database
                data.UpdateTaskScheduler(update);
            }
            catch (Exception ex)
            {
                Log.Error("Task process error:\r\n" + ex.ToString());
            }
        }

        private void EmailIssue(string taskName)
        {
            try
            {
                // Mail settings
                MailMessage mail = new MailMessage();
                SmtpClient smtp = new SmtpClient("smtp.gmail.com");
                mail.From = new MailAddress("no.reply@uniguard.com.au");
                mail.Subject = "Issue with UniGuard 12 Scheduled Task";
                mail.BodyEncoding = Encoding.UTF8;

                string message = "Hello," + Environment.NewLine + Environment.NewLine;
                message += "There was an issues generating the report for your scheduled task '{0}'." + Environment.NewLine;
                message += "Please check all the parameters from the scheduled and ensure the report is valid and within the 60 day report period limit.";
                message += Environment.NewLine + Environment.NewLine + "Regards," + Environment.NewLine + "The UniGuard Team.";

                // Write body
                mail.Body = String.Format(message, taskName);

                // Add account admins
                string[] adminEmails = data.GetAdministratorEmails();
                for (var i = 0; i < adminEmails.Length; i++)
                {
                    mail.To.Add(adminEmails[i]);
                }

                // Server settings
                smtp.Port = 587;
                smtp.EnableSsl = true;
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                //attempt to fix 5.5.1 Authentication required
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = new NetworkCredential("no.reply@uniguard.com.au", "B6gYu9uGtr4xuG1!");
                smtp.Send(mail);

            }
            catch (Exception ex)
            {
                Log.Error("Mail error:\r\n" + ex.ToString());
            }
        }

        /// <summary>
        /// Sends the current scope's file and the passed message to the list of emails.
        /// Also deletes the file once it is sent successfully.
        /// </summary>
        /// <param name="emails">Array of string, email addresses</param>
        /// <param name="message">String - body message</param>
        private void EmailTask(string[] emails, string message, string subject)
        {
            Attachment attachment = null;

            // Attempt to send emails
            try
            {
                // Mail settings
                MailMessage mail = new MailMessage();
                SmtpClient smtp  = new SmtpClient("smtp.gmail.com");
                mail.From = new MailAddress("no.reply@uniguard.com.au");
                mail.Subject = subject == null ? "UniGuard 12 Report" : subject;
                mail.Body = message;
                mail.BodyEncoding = Encoding.UTF8;

                // Add recipients
                if (emails.Length > 0)
                {
                    foreach (string email in emails)
                    {
                        mail.To.Add(email);
                    }
                }
                else
                {
                    string[] adminEmails = data.GetAdministratorEmails();
                    for (var i = 0; i < adminEmails.Length; i++)
                    {
                        mail.To.Add(adminEmails[i]);
                    }
                    mail.Body += Environment.NewLine + "The above scheduled task email has been forwarded back to the account ";
                    mail.Body += "administrator as it has not been sent with any email recipients.";
                }

                // Add attachment
                attachment = new Attachment(this.file.FullName);
                mail.Attachments.Add(attachment);

                // Server settings
                smtp.Port = 587;
                smtp.EnableSsl = true;
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.Credentials = new NetworkCredential("no.reply@uniguard.com.au", "B6gYu9uGtr4xuG1!");
                smtp.Send(mail);
            }
            catch (Exception ex)
            {
                Log.Error("Mail error:\r\n" + ex.ToString());
            }

            // Attempt to delete file after it has been emailed
            try
            {
                if (attachment != null) attachment.Dispose();
                this.file.Delete();
            }
            catch (Exception ex)
            {
                Log.Error("Could not delete file:" + ex.ToString());
            }
        }

        /// <summary>
        /// Send a request to the server
        /// </summary>
        /// <param name="accountId">Integer, account id</param>
        /// <param name="scheduledTaskId">Integer, scheduledtask id</param>
        /// <returns>Returns response from server</returns>
        private string SendRequest(int accountId, int scheduledTaskId)
        {
            string responseFromServer = null;
            WebResponse response = null;
            Stream data;

            // Build URI
            string post = String.Format("account_id={0}&id={1}",
                WebUtility.HtmlEncode(accountId.ToString()),
                WebUtility.HtmlEncode(scheduledTaskId.ToString())
            );

            // Get byte array of url
            Byte[] byteArray = Encoding.UTF8.GetBytes(post);
            
            // Create request
            WebRequest request = WebRequest.Create(URL + "/?" + post);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            request.Timeout = 300000;

            // Write the byte data into the stream
            try
            {
                data = request.GetRequestStream();
                data.Write(byteArray, 0, byteArray.Length);
                data.Close();
            }
            catch (Exception ex)
            {
                Log.Error("Data stream error: " + ex.Message);
            }

            // Get the response
            try
            { 
                response = request.GetResponse();
                data = response.GetResponseStream();
                // Read the data stram
                StreamReader reader = new StreamReader(data);
                responseFromServer = reader.ReadToEnd();

                // CLean up
                reader.Close();
                data.Close();
                response.Close();
            }
            catch (Exception ex)
            {
                Log.Error("Stream error: " + ex.Message);
            }

            return responseFromServer;
        }

    }

}
